##
# federc/parser.fd
#-------------------------------------------------------------------------------
# Copyright (c) 2018 Fionn Langhans
#
# This software is provided 'as-is', without any express or implied warranty. In
# no event will the authors be held liable for any damages arising from the use
# of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it freely,
# subject to the following restrictions:
# 
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software in a
#    product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 
# 3. This notice may not be removed or altered from any source distribution.
#-------------------------------------------------------------------------------
##

include "stdio.fd"
include "federc/help.fd"
include "federc/syntax.fd"

namespace compiler
    namespace parser
        class ParserResult
            # Header: Forward declaration
            String header_forDec

            String header

            # C file: Forward declaration
            String c_forDec

            String c
        ;

        global STYPE_NONE = 0x00
        global STYPE_CLASS = 0x01
        global STYPE_DATATYPE = 0x02
        global STYPE_FUNCTION = 0x04
        global STYPE_INTERFACE = 0x08
        global STYPE_NAMESPACE = 0x10
        global STYPE_OBJECT = 0x20
        global STYPE_BINDING = 0x40
        global STYPE_DIRECT = 0x80

        class Symbol
            int32 stype
            String name
            String buildName

            Symbol parent
            Symbol[] children

            func init
                children = Symbol[0]
            ;

            Symbol func new(int32 stype0, String name0, Symbol parent0)
                parent = parent0
                stype = stype0
                name = name0
            ;
        ;

        ParserResult func parseMaster(syntax.SyntaxTreeBranch master,
                                      Symbol[] symbols)
             
        ;
    ;
;
